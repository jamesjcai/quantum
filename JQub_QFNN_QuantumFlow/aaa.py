import torch
import torchvision
from torchvision import datasets
import torchvision.transforms as transforms
import qiskit  
import sys
from pathlib import Path
import numpy as np
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image
from matplotlib import cm
import functools


# Quantum-State Preparation in IBM Qiskit
from qiskit import QuantumRegister, QuantumCircuit, ClassicalRegister
from qiskit.extensions import XGate, UnitaryGate
from qiskit import Aer, execute
import qiskit
# Input: a 4*4 matrix (data) holding 16 input data
inp = QuantumRegister(4,"in_qbit")
circ = QuantumCircuit(inp)




im = [[0.1333, 0.2980, 0.1922, 0.0118],
         [0.0980, 0.2667, 0.4941, 0.0392],
         [0.0157, 0.1922, 0.4667, 0.2471],
         [0.0353, 0.2549, 0.3216, 0.1176]]


ima=np.asarray(im)
input_matrix = np.float64(ima.transpose(0,1))
u, s, v = np.linalg.svd(input_matrix)
output_matrix = np.dot(u, v)


im = [[0.135374,-0.302637,-0.195191,-0.011984,-0.099525,-0.270850,-0.501789,-0.039810,-0.015944,-0.195191,-0.473963,-0.250945,-0.035849,-0.258867,-0.326605,-0.119430],
[0.302637,0.919331,-0.052029,-0.003194,-0.026529,-0.072196,-0.133753,-0.010611,-0.004250,-0.052029,-0.126336,-0.066890,-0.009556,-0.069002,-0.087057,-0.031834],
[0.195191,-0.052029,0.966443,-0.002060,-0.017110,-0.046564,-0.086266,-0.006844,-0.002741,-0.033557,-0.081483,-0.043142,-0.006163,-0.044504,-0.056149,-0.020532],
[0.011984,-0.003194,-0.002060,0.999874,-0.001050,-0.002859,-0.005296,-0.000420,-0.000168,-0.002060,-0.005003,-0.002649,-0.000378,-0.002732,-0.003447,-0.001261],
[0.099525,-0.026529,-0.017110,-0.001050,0.991276,-0.023742,-0.043986,-0.003490,-0.001398,-0.017110,-0.041547,-0.021997,-0.003142,-0.022692,-0.028630,-0.010469],
[0.270850,-0.072196,-0.046564,-0.002859,-0.023742,0.935387,-0.119705,-0.009497,-0.003804,-0.046564,-0.113067,-0.059864,-0.008552,-0.061754,-0.077913,-0.028491],
[0.501789,-0.133753,-0.086266,-0.005296,-0.043986,-0.119705,0.778230,-0.017594,-0.007047,-0.086266,-0.209472,-0.110908,-0.015844,-0.114408,-0.144346,-0.052783],
[0.039810,-0.010611,-0.006844,-0.000420,-0.003490,-0.009497,-0.017594,0.998604,-0.000559,-0.006844,-0.016619,-0.008799,-0.001257,-0.009077,-0.011452,-0.004188],
[0.015944,-0.004250,-0.002741,-0.000168,-0.001398,-0.003804,-0.007047,-0.000559,0.999776,-0.002741,-0.006656,-0.003524,-0.000503,-0.003635,-0.004587,-0.001677],
[0.195191,-0.052029,-0.033557,-0.002060,-0.017110,-0.046564,-0.086266,-0.006844,-0.002741,0.966443,-0.081483,-0.043142,-0.006163,-0.044504,-0.056149,-0.020532],
[0.473963,-0.126336,-0.081483,-0.005003,-0.041547,-0.113067,-0.209472,-0.016619,-0.006656,-0.081483,0.802144,-0.104757,-0.014965,-0.108064,-0.136341,-0.049856],
[0.250945,-0.066890,-0.043142,-0.002649,-0.021997,-0.059864,-0.110908,-0.008799,-0.003524,-0.043142,-0.104757,0.944535,-0.007924,-0.057216,-0.072188,-0.026397],
[0.035849,-0.009556,-0.006163,-0.000378,-0.003142,-0.008552,-0.015844,-0.001257,-0.000503,-0.006163,-0.014965,-0.007924,0.998868,-0.008174,-0.010313,-0.003771],
[0.258867,-0.069002,-0.044504,-0.002732,-0.022692,-0.061754,-0.114408,-0.009077,-0.003635,-0.044504,-0.108064,-0.057216,-0.008174,0.940978,-0.074466,-0.027230],
[0.326605,-0.087057,-0.056149,-0.003447,-0.028630,-0.077913,-0.144346,-0.011452,-0.004587,-0.056149,-0.136341,-0.072188,-0.010313,-0.074466,0.906048,-0.034356],
[0.119430,-0.031834,-0.020532,-0.001261,-0.010469,-0.028491,-0.052783,-0.004188,-0.001677,-0.020532,-0.049856,-0.026397,-0.003771,-0.027230,-0.034356,0.987437]]

ima=np.asarray(im)
np.dot(ima,ima.transpose())
u, s, v = np.linalg.svd(ima)
input=np.dot(u,v)

# np.linalg.norm(input-ima)

circ.append(UnitaryGate(input, label="Input"), inp[0:4])
print(circ)
